
Power_out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000055c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000055c  000005f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  00800062  00800062  000005f2  2**0
                  ALLOC
  3 .stab         000011ac  00000000  00000000  000005f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fe7  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002787  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002798  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	63 c1       	rjmp	.+710    	; 0x2cc <__vector_2>
   6:	a2 c1       	rjmp	.+836    	; 0x34c <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	ee c1       	rjmp	.+988    	; 0x3f8 <__vector_13>
  1c:	11 c2       	rjmp	.+1058   	; 0x440 <__vector_14>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ec e5       	ldi	r30, 0x5C	; 92
  32:	f5 e0       	ldi	r31, 0x05	; 5
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a2 36       	cpi	r26, 0x62	; 98
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a2 e6       	ldi	r26, 0x62	; 98
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a2 39       	cpi	r26, 0x92	; 146
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	04 d1       	rcall	.+520    	; 0x25a <main>
  52:	82 c2       	rjmp	.+1284   	; 0x558 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <BlinkCfg>:


/*******************************
 ************FUNKCIJE***********
 *******************************/
void BlinkCfg(Blink *ledica){
  56:	ef 92       	push	r14
  58:	ff 92       	push	r15
  5a:	0f 93       	push	r16
  5c:	1f 93       	push	r17
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	fc 01       	movw	r30, r24
	SETBIT(*(ledica->dir_port), ledica->pin);
  64:	80 81       	ld	r24, Z
  66:	c3 81       	ldd	r28, Z+3	; 0x03
  68:	d4 81       	ldd	r29, Z+4	; 0x04
  6a:	28 81       	ld	r18, Y
  6c:	41 e0       	ldi	r20, 0x01	; 1
  6e:	50 e0       	ldi	r21, 0x00	; 0
  70:	60 e0       	ldi	r22, 0x00	; 0
  72:	70 e0       	ldi	r23, 0x00	; 0
  74:	7a 01       	movw	r14, r20
  76:	8b 01       	movw	r16, r22
  78:	04 c0       	rjmp	.+8      	; 0x82 <BlinkCfg+0x2c>
  7a:	ee 0c       	add	r14, r14
  7c:	ff 1c       	adc	r15, r15
  7e:	00 1f       	adc	r16, r16
  80:	11 1f       	adc	r17, r17
  82:	8a 95       	dec	r24
  84:	d2 f7       	brpl	.-12     	; 0x7a <BlinkCfg+0x24>
  86:	d8 01       	movw	r26, r16
  88:	c7 01       	movw	r24, r14
  8a:	82 2b       	or	r24, r18
  8c:	88 83       	st	Y, r24
	if(ledica->value==1)SETBIT(*(ledica->port), ledica->pin);
  8e:	85 81       	ldd	r24, Z+5	; 0x05
  90:	90 81       	ld	r25, Z
  92:	01 80       	ldd	r0, Z+1	; 0x01
  94:	f2 81       	ldd	r31, Z+2	; 0x02
  96:	e0 2d       	mov	r30, r0
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	a9 f0       	breq	.+42     	; 0xc6 <BlinkCfg+0x70>
	else CLEARBIT(*(ledica->port), ledica->pin);
  9c:	80 81       	ld	r24, Z
  9e:	04 c0       	rjmp	.+8      	; 0xa8 <BlinkCfg+0x52>
  a0:	44 0f       	add	r20, r20
  a2:	55 1f       	adc	r21, r21
  a4:	66 1f       	adc	r22, r22
  a6:	77 1f       	adc	r23, r23
  a8:	9a 95       	dec	r25
  aa:	d2 f7       	brpl	.-12     	; 0xa0 <BlinkCfg+0x4a>
  ac:	40 95       	com	r20
  ae:	50 95       	com	r21
  b0:	60 95       	com	r22
  b2:	70 95       	com	r23
  b4:	48 23       	and	r20, r24
  b6:	40 83       	st	Z, r20
}
  b8:	df 91       	pop	r29
  ba:	cf 91       	pop	r28
  bc:	1f 91       	pop	r17
  be:	0f 91       	pop	r16
  c0:	ff 90       	pop	r15
  c2:	ef 90       	pop	r14
  c4:	08 95       	ret
/*******************************
 ************FUNKCIJE***********
 *******************************/
void BlinkCfg(Blink *ledica){
	SETBIT(*(ledica->dir_port), ledica->pin);
	if(ledica->value==1)SETBIT(*(ledica->port), ledica->pin);
  c6:	80 81       	ld	r24, Z
  c8:	04 c0       	rjmp	.+8      	; 0xd2 <BlinkCfg+0x7c>
  ca:	44 0f       	add	r20, r20
  cc:	55 1f       	adc	r21, r21
  ce:	66 1f       	adc	r22, r22
  d0:	77 1f       	adc	r23, r23
  d2:	9a 95       	dec	r25
  d4:	d2 f7       	brpl	.-12     	; 0xca <BlinkCfg+0x74>
  d6:	48 2b       	or	r20, r24
  d8:	40 83       	st	Z, r20
	else CLEARBIT(*(ledica->port), ledica->pin);
}
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	1f 91       	pop	r17
  e0:	0f 91       	pop	r16
  e2:	ff 90       	pop	r15
  e4:	ef 90       	pop	r14
  e6:	08 95       	ret

000000e8 <IOCfg>:
 *******************************/

Blink leds[LED_NUM];
Input zero;

void IOCfg(){
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29


	leds[0].pin = GRELEC;
  ec:	e4 e6       	ldi	r30, 0x64	; 100
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	80 83       	st	Z, r24
	leds[0].port=&GRELEC_PORT;
  f4:	28 e3       	ldi	r18, 0x38	; 56
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	32 83       	std	Z+2, r19	; 0x02
  fa:	21 83       	std	Z+1, r18	; 0x01
	leds[0].dir_port=&GRELEC_DIR_PORT;
  fc:	47 e3       	ldi	r20, 0x37	; 55
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	54 83       	std	Z+4, r21	; 0x04
 102:	43 83       	std	Z+3, r20	; 0x03
	leds[0].value=1;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	85 83       	std	Z+5, r24	; 0x05
	leds[0].duty=50;
 108:	92 e3       	ldi	r25, 0x32	; 50
 10a:	90 87       	std	Z+8, r25	; 0x08

	leds[1].pin = LUC;
 10c:	64 e0       	ldi	r22, 0x04	; 4
 10e:	61 87       	std	Z+9, r22	; 0x09
	leds[1].port=&LUC_PORT;
 110:	33 87       	std	Z+11, r19	; 0x0b
 112:	22 87       	std	Z+10, r18	; 0x0a
	leds[1].dir_port=&LUC_DIR_PORT;
 114:	55 87       	std	Z+13, r21	; 0x0d
 116:	44 87       	std	Z+12, r20	; 0x0c
	leds[1].value=1;
 118:	86 87       	std	Z+14, r24	; 0x0e
	leds[1].duty=50;
 11a:	91 8b       	std	Z+17, r25	; 0x11

	zero.pin=ZERO;
 11c:	c6 e7       	ldi	r28, 0x76	; 118
 11e:	d0 e0       	ldi	r29, 0x00	; 0
 120:	88 83       	st	Y, r24
	zero.dir_port=&ZERO_DIR_PORT;
 122:	5c 83       	std	Y+4, r21	; 0x04
 124:	4b 83       	std	Y+3, r20	; 0x03
	zero.port=&ZERO_PORT;
 126:	3a 83       	std	Y+2, r19	; 0x02
 128:	29 83       	std	Y+1, r18	; 0x01
	zero.value_reg=&ZERO_VALUE_REG;
 12a:	26 e3       	ldi	r18, 0x36	; 54
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	3e 83       	std	Y+6, r19	; 0x06
 130:	2d 83       	std	Y+5, r18	; 0x05
	zero.pcint=ZERO_PCINT;
 132:	8f 83       	std	Y+7, r24	; 0x07


	for (uint8_t i=0; i<LED_NUM;i++){
		BlinkCfg(&leds[i]);
 134:	cf 01       	movw	r24, r30
 136:	8f df       	rcall	.-226    	; 0x56 <BlinkCfg>
 138:	8d e6       	ldi	r24, 0x6D	; 109
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	8c df       	rcall	.-232    	; 0x56 <BlinkCfg>
		CLEARBIT(*(ledica->port), ledica->pin);
	}
}

void InputCfg(Input *button){
	CLEARBIT(*(button->dir_port), button->pin);
 13e:	38 81       	ld	r19, Y
 140:	eb 81       	ldd	r30, Y+3	; 0x03
 142:	fc 81       	ldd	r31, Y+4	; 0x04
 144:	20 81       	ld	r18, Z
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	a0 e0       	ldi	r26, 0x00	; 0
 14c:	b0 e0       	ldi	r27, 0x00	; 0
 14e:	ac 01       	movw	r20, r24
 150:	bd 01       	movw	r22, r26
 152:	04 c0       	rjmp	.+8      	; 0x15c <IOCfg+0x74>
 154:	44 0f       	add	r20, r20
 156:	55 1f       	adc	r21, r21
 158:	66 1f       	adc	r22, r22
 15a:	77 1f       	adc	r23, r23
 15c:	3a 95       	dec	r19
 15e:	d2 f7       	brpl	.-12     	; 0x154 <IOCfg+0x6c>
 160:	40 95       	com	r20
 162:	50 95       	com	r21
 164:	60 95       	com	r22
 166:	70 95       	com	r23
 168:	42 23       	and	r20, r18
 16a:	40 83       	st	Z, r20
	SETBIT(*(button->port), button->pin);
 16c:	38 81       	ld	r19, Y
 16e:	e9 81       	ldd	r30, Y+1	; 0x01
 170:	fa 81       	ldd	r31, Y+2	; 0x02
 172:	20 81       	ld	r18, Z
 174:	ac 01       	movw	r20, r24
 176:	bd 01       	movw	r22, r26
 178:	04 c0       	rjmp	.+8      	; 0x182 <IOCfg+0x9a>
 17a:	44 0f       	add	r20, r20
 17c:	55 1f       	adc	r21, r21
 17e:	66 1f       	adc	r22, r22
 180:	77 1f       	adc	r23, r23
 182:	3a 95       	dec	r19
 184:	d2 f7       	brpl	.-12     	; 0x17a <IOCfg+0x92>
 186:	42 2b       	or	r20, r18
 188:	40 83       	st	Z, r20
	for (uint8_t i=0; i<LED_NUM;i++){
		BlinkCfg(&leds[i]);
	}

	InputCfg(&zero);
	CLEARBIT(*zero.port, zero.pin);
 18a:	38 81       	ld	r19, Y
 18c:	e9 81       	ldd	r30, Y+1	; 0x01
 18e:	fa 81       	ldd	r31, Y+2	; 0x02
 190:	20 81       	ld	r18, Z
 192:	04 c0       	rjmp	.+8      	; 0x19c <IOCfg+0xb4>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	aa 1f       	adc	r26, r26
 19a:	bb 1f       	adc	r27, r27
 19c:	3a 95       	dec	r19
 19e:	d2 f7       	brpl	.-12     	; 0x194 <IOCfg+0xac>
 1a0:	80 95       	com	r24
 1a2:	90 95       	com	r25
 1a4:	a0 95       	com	r26
 1a6:	b0 95       	com	r27
 1a8:	82 23       	and	r24, r18
 1aa:	80 83       	st	Z, r24
};
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <SetValue>:
	SETBIT(*(ledica->dir_port), ledica->pin);
	if(ledica->value==1)SETBIT(*(ledica->port), ledica->pin);
	else CLEARBIT(*(ledica->port), ledica->pin);
}

void SetValue(Blink *ledica){
 1b2:	fc 01       	movw	r30, r24
	if(ledica->value==1){
 1b4:	85 81       	ldd	r24, Z+5	; 0x05
		SETBIT(*(ledica->port), ledica->pin);
 1b6:	30 81       	ld	r19, Z
 1b8:	01 80       	ldd	r0, Z+1	; 0x01
 1ba:	f2 81       	ldd	r31, Z+2	; 0x02
 1bc:	e0 2d       	mov	r30, r0
 1be:	20 81       	ld	r18, Z
	if(ledica->value==1)SETBIT(*(ledica->port), ledica->pin);
	else CLEARBIT(*(ledica->port), ledica->pin);
}

void SetValue(Blink *ledica){
	if(ledica->value==1){
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	91 f0       	breq	.+36     	; 0x1e8 <SetValue+0x36>
		SETBIT(*(ledica->port), ledica->pin);
	}
	else {
		CLEARBIT(*(ledica->port), ledica->pin);
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	a0 e0       	ldi	r26, 0x00	; 0
 1ca:	b0 e0       	ldi	r27, 0x00	; 0
 1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <SetValue+0x24>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	aa 1f       	adc	r26, r26
 1d4:	bb 1f       	adc	r27, r27
 1d6:	3a 95       	dec	r19
 1d8:	d2 f7       	brpl	.-12     	; 0x1ce <SetValue+0x1c>
 1da:	80 95       	com	r24
 1dc:	90 95       	com	r25
 1de:	a0 95       	com	r26
 1e0:	b0 95       	com	r27
 1e2:	82 23       	and	r24, r18
 1e4:	80 83       	st	Z, r24
 1e6:	08 95       	ret
	else CLEARBIT(*(ledica->port), ledica->pin);
}

void SetValue(Blink *ledica){
	if(ledica->value==1){
		SETBIT(*(ledica->port), ledica->pin);
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	a0 e0       	ldi	r26, 0x00	; 0
 1ee:	b0 e0       	ldi	r27, 0x00	; 0
 1f0:	04 c0       	rjmp	.+8      	; 0x1fa <SetValue+0x48>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	aa 1f       	adc	r26, r26
 1f8:	bb 1f       	adc	r27, r27
 1fa:	3a 95       	dec	r19
 1fc:	d2 f7       	brpl	.-12     	; 0x1f2 <SetValue+0x40>
 1fe:	82 2b       	or	r24, r18
 200:	80 83       	st	Z, r24
 202:	08 95       	ret

00000204 <InputCfg>:
	else {
		CLEARBIT(*(ledica->port), ledica->pin);
	}
}

void InputCfg(Input *button){
 204:	0f 93       	push	r16
 206:	1f 93       	push	r17
 208:	fc 01       	movw	r30, r24
	CLEARBIT(*(button->dir_port), button->pin);
 20a:	90 81       	ld	r25, Z
 20c:	a3 81       	ldd	r26, Z+3	; 0x03
 20e:	b4 81       	ldd	r27, Z+4	; 0x04
 210:	8c 91       	ld	r24, X
 212:	41 e0       	ldi	r20, 0x01	; 1
 214:	50 e0       	ldi	r21, 0x00	; 0
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	8a 01       	movw	r16, r20
 21c:	9b 01       	movw	r18, r22
 21e:	04 c0       	rjmp	.+8      	; 0x228 <InputCfg+0x24>
 220:	00 0f       	add	r16, r16
 222:	11 1f       	adc	r17, r17
 224:	22 1f       	adc	r18, r18
 226:	33 1f       	adc	r19, r19
 228:	9a 95       	dec	r25
 22a:	d2 f7       	brpl	.-12     	; 0x220 <InputCfg+0x1c>
 22c:	00 95       	com	r16
 22e:	10 95       	com	r17
 230:	20 95       	com	r18
 232:	30 95       	com	r19
 234:	08 23       	and	r16, r24
 236:	0c 93       	st	X, r16
	SETBIT(*(button->port), button->pin);
 238:	90 81       	ld	r25, Z
 23a:	01 80       	ldd	r0, Z+1	; 0x01
 23c:	f2 81       	ldd	r31, Z+2	; 0x02
 23e:	e0 2d       	mov	r30, r0
 240:	80 81       	ld	r24, Z
 242:	04 c0       	rjmp	.+8      	; 0x24c <InputCfg+0x48>
 244:	44 0f       	add	r20, r20
 246:	55 1f       	adc	r21, r21
 248:	66 1f       	adc	r22, r22
 24a:	77 1f       	adc	r23, r23
 24c:	9a 95       	dec	r25
 24e:	d2 f7       	brpl	.-12     	; 0x244 <InputCfg+0x40>
 250:	48 2b       	or	r20, r24
 252:	40 83       	st	Z, r20
}
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <main>:
char usi_i2c_slave_address=0x41;

uint8_t cnt;
Input zero;

int main(void){
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	00 d0       	rcall	.+0      	; 0x260 <__stack+0x1>
 260:	cd b7       	in	r28, 0x3d	; 61
 262:	de b7       	in	r29, 0x3e	; 62

	sei();
 264:	78 94       	sei
	char b;
	char error;
	char wtchdog;

	// inicializacija vhodnih in izhodnih pinov ter struktur
	IOCfg();
 266:	40 df       	rcall	.-384    	; 0xe8 <IOCfg>
	//OCR1A=0x99;
	//SETBIT(TIMSK, OCIE1A);


	// I2C inicializacija z naslovom 0x41
	USI_I2C_Init(0x41);
 268:	81 e4       	ldi	r24, 0x41	; 65
 26a:	ba d0       	rcall	.+372    	; 0x3e0 <USI_I2C_Init>


	// interni registri I2C komunikacije

	// izhod za grelec
	USI_Slave_register_buffer[0]=&leds[0].value;
 26c:	89 e6       	ldi	r24, 0x69	; 105
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <USI_Slave_register_buffer+0x1>
 274:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <USI_Slave_register_buffer>
	// izhod za luc
	USI_Slave_register_buffer[1]=&leds[1].value;
 278:	82 e7       	ldi	r24, 0x72	; 114
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <USI_Slave_register_buffer+0x3>
 280:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <USI_Slave_register_buffer+0x2>
	// register za napake
	USI_Slave_register_buffer[2]=&error;
 284:	ce 01       	movw	r24, r28
 286:	02 96       	adiw	r24, 0x02	; 2
 288:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <USI_Slave_register_buffer+0x5>
 28c:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <USI_Slave_register_buffer+0x4>
	// watchdog (ni še)
	USI_Slave_register_buffer[3]=&wtchdog;
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <USI_Slave_register_buffer+0x7>
 296:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <USI_Slave_register_buffer+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29a:	2f ef       	ldi	r18, 0xFF	; 255
 29c:	89 e6       	ldi	r24, 0x69	; 105
 29e:	98 e1       	ldi	r25, 0x18	; 24
 2a0:	21 50       	subi	r18, 0x01	; 1
 2a2:	80 40       	sbci	r24, 0x00	; 0
 2a4:	90 40       	sbci	r25, 0x00	; 0
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <__stack+0x41>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <__stack+0x4b>
 2aa:	00 00       	nop
	for(;;){
		//_delay_ms(100);
		//leds[0].duty=50;
		//leds[1].duty=50;
		for (uint8_t i=0; i<LED_NUM;i++){
			SetValue(&leds[i]);
 2ac:	84 e6       	ldi	r24, 0x64	; 100
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	80 df       	rcall	.-256    	; 0x1b2 <SetValue>
 2b2:	8d e6       	ldi	r24, 0x6D	; 109
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	7d df       	rcall	.-262    	; 0x1b2 <SetValue>
 2b8:	2f ef       	ldi	r18, 0xFF	; 255
 2ba:	89 e6       	ldi	r24, 0x69	; 105
 2bc:	98 e1       	ldi	r25, 0x18	; 24
 2be:	21 50       	subi	r18, 0x01	; 1
 2c0:	80 40       	sbci	r24, 0x00	; 0
 2c2:	90 40       	sbci	r25, 0x00	; 0
 2c4:	e1 f7       	brne	.-8      	; 0x2be <__stack+0x5f>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <__stack+0x69>
 2c8:	00 00       	nop
 2ca:	f0 cf       	rjmp	.-32     	; 0x2ac <__stack+0x4d>

000002cc <__vector_2>:
	}
	return 0;
}


ISR(PCINT0_vect){
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	2f 93       	push	r18
 2d8:	3f 93       	push	r19
 2da:	4f 93       	push	r20
 2dc:	5f 93       	push	r21
 2de:	6f 93       	push	r22
 2e0:	7f 93       	push	r23
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
 2e6:	af 93       	push	r26
 2e8:	bf 93       	push	r27
 2ea:	cf 93       	push	r28
 2ec:	ef 93       	push	r30
 2ee:	ff 93       	push	r31
	if(BITVAL(*zero.value_reg,zero.pin)){
 2f0:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <zero+0x5>
 2f4:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <zero+0x6>
 2f8:	80 81       	ld	r24, Z
 2fa:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <zero>
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	02 c0       	rjmp	.+4      	; 0x306 <__vector_2+0x3a>
 302:	95 95       	asr	r25
 304:	87 95       	ror	r24
 306:	2a 95       	dec	r18
 308:	e2 f7       	brpl	.-8      	; 0x302 <__vector_2+0x36>
 30a:	80 ff       	sbrs	r24, 0
 30c:	0d c0       	rjmp	.+26     	; 0x328 <__vector_2+0x5c>
		cnt=0;
 30e:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <cnt>
		for (uint8_t i=0; i<LED_NUM;i++){
//			if(!leds[i].duty){
//				leds[i].value=1;
//			}
//			else
				leds[i].value=1;
 312:	c1 e0       	ldi	r28, 0x01	; 1
 314:	c0 93 69 00 	sts	0x0069, r28	; 0x800069 <leds+0x5>

			SetValue(&leds[i]);
 318:	84 e6       	ldi	r24, 0x64	; 100
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	4a df       	rcall	.-364    	; 0x1b2 <SetValue>
		for (uint8_t i=0; i<LED_NUM;i++){
//			if(!leds[i].duty){
//				leds[i].value=1;
//			}
//			else
				leds[i].value=1;
 31e:	c0 93 72 00 	sts	0x0072, r28	; 0x800072 <leds+0xe>

			SetValue(&leds[i]);
 322:	8d e6       	ldi	r24, 0x6D	; 109
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	45 df       	rcall	.-374    	; 0x1b2 <SetValue>
		}
	}
}
 328:	ff 91       	pop	r31
 32a:	ef 91       	pop	r30
 32c:	cf 91       	pop	r28
 32e:	bf 91       	pop	r27
 330:	af 91       	pop	r26
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	7f 91       	pop	r23
 338:	6f 91       	pop	r22
 33a:	5f 91       	pop	r21
 33c:	4f 91       	pop	r20
 33e:	3f 91       	pop	r19
 340:	2f 91       	pop	r18
 342:	0f 90       	pop	r0
 344:	0f be       	out	0x3f, r0	; 63
 346:	0f 90       	pop	r0
 348:	1f 90       	pop	r1
 34a:	18 95       	reti

0000034c <__vector_3>:

ISR(TIM1_COMPA_vect){
 34c:	1f 92       	push	r1
 34e:	0f 92       	push	r0
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	0f 92       	push	r0
 354:	11 24       	eor	r1, r1
 356:	2f 93       	push	r18
 358:	3f 93       	push	r19
 35a:	4f 93       	push	r20
 35c:	5f 93       	push	r21
 35e:	6f 93       	push	r22
 360:	7f 93       	push	r23
 362:	8f 93       	push	r24
 364:	9f 93       	push	r25
 366:	af 93       	push	r26
 368:	bf 93       	push	r27
 36a:	ef 93       	push	r30
 36c:	ff 93       	push	r31
	cnt++;
 36e:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <cnt>
 372:	8f 5f       	subi	r24, 0xFF	; 255
 374:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <cnt>
	for (uint8_t i=0; i<LED_NUM;i++){
		if((100-leds[i].duty)<=cnt){
 378:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <leds+0x8>
 37c:	24 e6       	ldi	r18, 0x64	; 100
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	29 1b       	sub	r18, r25
 382:	31 09       	sbc	r19, r1
 384:	48 2f       	mov	r20, r24
 386:	50 e0       	ldi	r21, 0x00	; 0
 388:	42 17       	cp	r20, r18
 38a:	53 07       	cpc	r21, r19
 38c:	dc f4       	brge	.+54     	; 0x3c4 <__vector_3+0x78>
 38e:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <leds+0x11>
 392:	24 e6       	ldi	r18, 0x64	; 100
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	29 1b       	sub	r18, r25
 398:	31 09       	sbc	r19, r1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	82 17       	cp	r24, r18
 39e:	93 07       	cpc	r25, r19
 3a0:	cc f4       	brge	.+50     	; 0x3d4 <__vector_3+0x88>
			leds[i].value=0;
			SetValue(&leds[i]);
		}
	}
 3a2:	ff 91       	pop	r31
 3a4:	ef 91       	pop	r30
 3a6:	bf 91       	pop	r27
 3a8:	af 91       	pop	r26
 3aa:	9f 91       	pop	r25
 3ac:	8f 91       	pop	r24
 3ae:	7f 91       	pop	r23
 3b0:	6f 91       	pop	r22
 3b2:	5f 91       	pop	r21
 3b4:	4f 91       	pop	r20
 3b6:	3f 91       	pop	r19
 3b8:	2f 91       	pop	r18
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

ISR(TIM1_COMPA_vect){
	cnt++;
	for (uint8_t i=0; i<LED_NUM;i++){
		if((100-leds[i].duty)<=cnt){
			leds[i].value=0;
 3c4:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <leds+0x5>
			SetValue(&leds[i]);
 3c8:	84 e6       	ldi	r24, 0x64	; 100
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	f2 de       	rcall	.-540    	; 0x1b2 <SetValue>
 3ce:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <cnt>
 3d2:	dd cf       	rjmp	.-70     	; 0x38e <__vector_3+0x42>

ISR(TIM1_COMPA_vect){
	cnt++;
	for (uint8_t i=0; i<LED_NUM;i++){
		if((100-leds[i].duty)<=cnt){
			leds[i].value=0;
 3d4:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <leds+0xe>
			SetValue(&leds[i]);
 3d8:	8d e6       	ldi	r24, 0x6D	; 109
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	ea de       	rcall	.-556    	; 0x1b2 <SetValue>
 3de:	e1 cf       	rjmp	.-62     	; 0x3a2 <__vector_3+0x56>

000003e0 <USI_I2C_Init>:

////////////////////////////////////////////////////////////////////////////////////////////////////

void USI_I2C_Init(char address)
{
	PORT_USI &= ~(1 << PORT_USI_SCL);
 3e0:	c2 98       	cbi	0x18, 2	; 24
	PORT_USI &= ~(1 << PORT_USI_SDA);
 3e2:	c0 98       	cbi	0x18, 0	; 24

	usi_i2c_slave_address = address;
 3e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>

	USI_SET_BOTH_INPUT();
 3e8:	87 b3       	in	r24, 0x17	; 23
 3ea:	8a 7f       	andi	r24, 0xFA	; 250
 3ec:	87 bb       	out	0x17, r24	; 23

	USICR = (1 << USISIE) | (0 << USIOIE) | (1 << USIWM1) | (0 << USIWM0) | (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | (0 << USITC);
 3ee:	88 ea       	ldi	r24, 0xA8	; 168
 3f0:	8d b9       	out	0x0d, r24	; 13
	USISR = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC);
 3f2:	80 ef       	ldi	r24, 0xF0	; 240
 3f4:	8e b9       	out	0x0e, r24	; 14
 3f6:	08 95       	ret

000003f8 <__vector_13>:
//  triggering the first state table interrupt.  If a stop condition occurs,   //
//  reset the start condition detector to detect the next start condition.     //
/////////////////////////////////////////////////////////////////////////////////

ISR(USI_START_vect)
{
 3f8:	1f 92       	push	r1
 3fa:	0f 92       	push	r0
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	0f 92       	push	r0
 400:	11 24       	eor	r1, r1
 402:	8f 93       	push	r24
	USI_I2C_Slave_State = USI_SLAVE_CHECK_ADDRESS;
 404:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <USI_I2C_Slave_State>
	USI_SET_SDA_INPUT();
 408:	b8 98       	cbi	0x17, 0	; 23
	// wait for SCL to go low to ensure the Start Condition has completed (the
	// start detector will hold SCL low ) - if a Stop Condition arises then leave
	// the interrupt to prevent waiting forever - don't use USISR to test for Stop
	// Condition as in Application Note AVR312 because the Stop Condition Flag is
	// going to be set from the last TWI sequence
	while((PIN_USI & (1 << PIN_USI_SCL)) && !((PIN_USI & (1 << PIN_USI_SDA))));
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
 40c:	b0 99       	sbic	0x16, 0	; 22
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
 410:	b2 99       	sbic	0x16, 2	; 22
 412:	fc cf       	rjmp	.-8      	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
	if(!(PIN_USI & (1 << PIN_USI_SDA)))
 414:	b0 9b       	sbis	0x16, 0	; 22
 416:	0a c0       	rjmp	.+20     	; 0x42c <__FUSE_REGION_LENGTH__+0x2c>
		USICR = USI_SLAVE_STOP_NOT_OCCUR_USICR;
	}
	else
	{
		// a Stop Condition did occur
    	USICR = USI_SLAVE_STOP_DID_OCCUR_USICR;
 418:	88 eb       	ldi	r24, 0xB8	; 184
 41a:	8d b9       	out	0x0d, r24	; 13
	}
	USISR = USI_SLAVE_CLEAR_START_USISR;
 41c:	80 ef       	ldi	r24, 0xF0	; 240
 41e:	8e b9       	out	0x0e, r24	; 14
}
 420:	8f 91       	pop	r24
 422:	0f 90       	pop	r0
 424:	0f be       	out	0x3f, r0	; 63
 426:	0f 90       	pop	r0
 428:	1f 90       	pop	r1
 42a:	18 95       	reti
	// going to be set from the last TWI sequence
	while((PIN_USI & (1 << PIN_USI_SCL)) && !((PIN_USI & (1 << PIN_USI_SDA))));
	if(!(PIN_USI & (1 << PIN_USI_SDA)))
	{
		// a Stop Condition did not occur
		USICR = USI_SLAVE_STOP_NOT_OCCUR_USICR;
 42c:	88 ee       	ldi	r24, 0xE8	; 232
 42e:	8d b9       	out	0x0d, r24	; 13
	else
	{
		// a Stop Condition did occur
    	USICR = USI_SLAVE_STOP_DID_OCCUR_USICR;
	}
	USISR = USI_SLAVE_CLEAR_START_USISR;
 430:	80 ef       	ldi	r24, 0xF0	; 240
 432:	8e b9       	out	0x0e, r24	; 14
}
 434:	8f 91       	pop	r24
 436:	0f 90       	pop	r0
 438:	0f be       	out	0x3f, r0	; 63
 43a:	0f 90       	pop	r0
 43c:	1f 90       	pop	r1
 43e:	18 95       	reti

00000440 <__vector_14>:
//  This is used to set up a state table of I2C transmission states that fits  //
//  the I2C protocol for proper transmission.                                  //
/////////////////////////////////////////////////////////////////////////////////

ISR(USI_OVF_vect)
{
 440:	1f 92       	push	r1
 442:	0f 92       	push	r0
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	0f 92       	push	r0
 448:	11 24       	eor	r1, r1
 44a:	8f 93       	push	r24
 44c:	9f 93       	push	r25
 44e:	ef 93       	push	r30
 450:	ff 93       	push	r31
	switch (USI_I2C_Slave_State)
 452:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <USI_I2C_Slave_State>
 456:	82 30       	cpi	r24, 0x02	; 2
 458:	09 f4       	brne	.+2      	; 0x45c <__vector_14+0x1c>
 45a:	51 c0       	rjmp	.+162    	; 0x4fe <__vector_14+0xbe>
 45c:	00 f1       	brcs	.+64     	; 0x49e <__vector_14+0x5e>
 45e:	84 30       	cpi	r24, 0x04	; 4
 460:	a1 f1       	breq	.+104    	; 0x4ca <__vector_14+0x8a>
 462:	08 f4       	brcc	.+2      	; 0x466 <__vector_14+0x26>
 464:	44 c0       	rjmp	.+136    	; 0x4ee <__vector_14+0xae>
 466:	85 30       	cpi	r24, 0x05	; 5
 468:	89 f4       	brne	.+34     	; 0x48c <__vector_14+0x4c>
		//  After waiting for the master to finish transmission, this reads    //
		//  USIDR into either the i2c buffer or internal address, then sends   //
		//  an acknowledgement to the master.                                  //
		/////////////////////////////////////////////////////////////////////////
		case USI_SLAVE_RECV_DATA_ACK_SEND:
			USI_I2C_Slave_State = USI_SLAVE_RECV_DATA_WAIT;
 46a:	84 e0       	ldi	r24, 0x04	; 4
 46c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <USI_I2C_Slave_State>

			if(USI_Slave_internal_address_set == 0)
 470:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 474:	81 11       	cpse	r24, r1
 476:	5a c0       	rjmp	.+180    	; 0x52c <__vector_14+0xec>
			{
				USI_Slave_internal_address = USIDR;
 478:	8f b1       	in	r24, 0x0f	; 15
 47a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <USI_Slave_internal_address>
				USI_Slave_internal_address_set = 1;
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			else if(USI_Slave_internal_address <= USI_SLAVE_REGISTER_COUNT)
			{
				*(USI_Slave_register_buffer[USI_Slave_internal_address]) = USIDR;
			}

			USIDR = 0;
 484:	1f b8       	out	0x0f, r1	; 15
			USI_SET_SDA_OUTPUT();
 486:	b8 9a       	sbi	0x17, 0	; 23
			USISR = USI_SLAVE_COUNT_ACK_USISR;
 488:	8e e7       	ldi	r24, 0x7E	; 126
 48a:	8e b9       	out	0x0e, r24	; 14
			break;
	}
}
 48c:	ff 91       	pop	r31
 48e:	ef 91       	pop	r30
 490:	9f 91       	pop	r25
 492:	8f 91       	pop	r24
 494:	0f 90       	pop	r0
 496:	0f be       	out	0x3f, r0	; 63
 498:	0f 90       	pop	r0
 49a:	1f 90       	pop	r1
 49c:	18 95       	reti
//  the I2C protocol for proper transmission.                                  //
/////////////////////////////////////////////////////////////////////////////////

ISR(USI_OVF_vect)
{
	switch (USI_I2C_Slave_State)
 49e:	88 23       	and	r24, r24
 4a0:	b1 f1       	breq	.+108    	; 0x50e <__vector_14+0xce>
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	99 f7       	brne	.-26     	; 0x48c <__vector_14+0x4c>
		//  enable data transmission in the next 8 clocks.  Set to wait 8      //
		//  clocks and proceed to wait for ACK.                                //
		/////////////////////////////////////////////////////////////////////////
		case USI_SLAVE_SEND_DATA:

			if(USI_Slave_internal_address <= USI_SLAVE_REGISTER_COUNT)
 4a6:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <USI_Slave_internal_address>
 4aa:	e9 30       	cpi	r30, 0x09	; 9
 4ac:	a8 f0       	brcs	.+42     	; 0x4d8 <__vector_14+0x98>
			{
				USIDR = *(USI_Slave_register_buffer[USI_Slave_internal_address]);
			}
			else
			{
				USIDR = 0x00;
 4ae:	1f b8       	out	0x0f, r1	; 15
			}
			USI_Slave_internal_address++;
 4b0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <USI_Slave_internal_address>
 4b4:	8f 5f       	subi	r24, 0xFF	; 255
 4b6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <USI_Slave_internal_address>
			USI_I2C_Slave_State = USI_SLAVE_SEND_DATA_ACK_WAIT;
 4ba:	82 e0       	ldi	r24, 0x02	; 2
 4bc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <USI_I2C_Slave_State>

			//To send data, DDR for SDA must be 1 (Output) and PORT for SDA
			//must also be 1 (line drives low on USIDR MSB = 0 or PORT = 0)
			USI_SET_SDA_OUTPUT();
 4c0:	b8 9a       	sbi	0x17, 0	; 23
			PORT_USI |= (1 << PORT_USI_SDA);
 4c2:	c0 9a       	sbi	0x18, 0	; 24
			USISR = USI_SLAVE_COUNT_BYTE_USISR;
 4c4:	80 e7       	ldi	r24, 0x70	; 112
 4c6:	8e b9       	out	0x0e, r24	; 14
			break;
 4c8:	e1 cf       	rjmp	.-62     	; 0x48c <__vector_14+0x4c>
		//                                                                     //
		//  Prepares to wait 8 clocks to receive a data byte from the master.  //
		/////////////////////////////////////////////////////////////////////////
		case USI_SLAVE_RECV_DATA_WAIT:

			USI_I2C_Slave_State = USI_SLAVE_RECV_DATA_ACK_SEND;
 4ca:	85 e0       	ldi	r24, 0x05	; 5
 4cc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <USI_I2C_Slave_State>

			USI_SET_SDA_INPUT();
 4d0:	b8 98       	cbi	0x17, 0	; 23
			USISR = USI_SLAVE_COUNT_BYTE_USISR;
 4d2:	80 e7       	ldi	r24, 0x70	; 112
 4d4:	8e b9       	out	0x0e, r24	; 14
			break;
 4d6:	da cf       	rjmp	.-76     	; 0x48c <__vector_14+0x4c>
		/////////////////////////////////////////////////////////////////////////
		case USI_SLAVE_SEND_DATA:

			if(USI_Slave_internal_address <= USI_SLAVE_REGISTER_COUNT)
			{
				USIDR = *(USI_Slave_register_buffer[USI_Slave_internal_address]);
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	ee 0f       	add	r30, r30
 4dc:	ff 1f       	adc	r31, r31
 4de:	ef 57       	subi	r30, 0x7F	; 127
 4e0:	ff 4f       	sbci	r31, 0xFF	; 255
 4e2:	01 90       	ld	r0, Z+
 4e4:	f0 81       	ld	r31, Z
 4e6:	e0 2d       	mov	r30, r0
 4e8:	80 81       	ld	r24, Z
 4ea:	8f b9       	out	0x0f, r24	; 15
 4ec:	e1 cf       	rjmp	.-62     	; 0x4b0 <__vector_14+0x70>
		//  a reset to START conditions, if ACK, fall through into SEND_DATA   //
		//  to continue sending data.                                          //
		/////////////////////////////////////////////////////////////////////////
		case USI_SLAVE_SEND_DATA_ACK_CHECK:

			if(USIDR)
 4ee:	8f b1       	in	r24, 0x0f	; 15
 4f0:	88 23       	and	r24, r24
 4f2:	c9 f2       	breq	.-78     	; 0x4a6 <__vector_14+0x66>
			{
				//The master sent a NACK, indicating that it will not accept
				//more data.  Reset into START condition state
				USICR = USI_SLAVE_SET_START_COND_USICR;
 4f4:	88 ea       	ldi	r24, 0xA8	; 168
 4f6:	8d b9       	out	0x0d, r24	; 13
				USISR = USI_SLAVE_SET_START_COND_USISR;
 4f8:	80 e7       	ldi	r24, 0x70	; 112
 4fa:	8e b9       	out	0x0e, r24	; 14
				return;
 4fc:	c7 cf       	rjmp	.-114    	; 0x48c <__vector_14+0x4c>
		case USI_SLAVE_SEND_DATA_ACK_WAIT:

			//After sending, immediately shut off PORT = 1 to prevent driving
			//the line high (I2C should *NEVER* drive high, and could damage
			//connected devices if operating at different voltage levels)
			PORT_USI &= ~(1 << PORT_USI_SDA);
 4fe:	c0 98       	cbi	0x18, 0	; 24
			USI_I2C_Slave_State = USI_SLAVE_SEND_DATA_ACK_CHECK;
 500:	83 e0       	ldi	r24, 0x03	; 3
 502:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <USI_I2C_Slave_State>
			USI_SET_SDA_INPUT();
 506:	b8 98       	cbi	0x17, 0	; 23
			USISR = USI_SLAVE_COUNT_ACK_USISR;
 508:	8e e7       	ldi	r24, 0x7E	; 126
 50a:	8e b9       	out	0x0e, r24	; 14
			break;
 50c:	bf cf       	rjmp	.-130    	; 0x48c <__vector_14+0x4c>
		//  If the address was not for this device, the USI system is          //
		//  re-initialized for start condition.                                //
		/////////////////////////////////////////////////////////////////////////
		case USI_SLAVE_CHECK_ADDRESS:

			if((USIDR == 0) || ((USIDR >> 1) == usi_i2c_slave_address))
 50e:	8f b1       	in	r24, 0x0f	; 15
 510:	88 23       	and	r24, r24
 512:	31 f0       	breq	.+12     	; 0x520 <__vector_14+0xe0>
 514:	8f b1       	in	r24, 0x0f	; 15
 516:	86 95       	lsr	r24
 518:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 51c:	89 13       	cpse	r24, r25
 51e:	ea cf       	rjmp	.-44     	; 0x4f4 <__vector_14+0xb4>
			{
				if (USIDR & 0x01)
 520:	78 9b       	sbis	0x0f, 0	; 15
 522:	14 c0       	rjmp	.+40     	; 0x54c <__vector_14+0x10c>
				{
					USI_I2C_Slave_State = USI_SLAVE_SEND_DATA;
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <USI_I2C_Slave_State>
 52a:	ac cf       	rjmp	.-168    	; 0x484 <__vector_14+0x44>
			if(USI_Slave_internal_address_set == 0)
			{
				USI_Slave_internal_address = USIDR;
				USI_Slave_internal_address_set = 1;
			}
			else if(USI_Slave_internal_address <= USI_SLAVE_REGISTER_COUNT)
 52c:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <USI_Slave_internal_address>
 530:	e9 30       	cpi	r30, 0x09	; 9
 532:	08 f0       	brcs	.+2      	; 0x536 <__vector_14+0xf6>
 534:	a7 cf       	rjmp	.-178    	; 0x484 <__vector_14+0x44>
			{
				*(USI_Slave_register_buffer[USI_Slave_internal_address]) = USIDR;
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	ee 0f       	add	r30, r30
 53a:	ff 1f       	adc	r31, r31
 53c:	ef 57       	subi	r30, 0x7F	; 127
 53e:	ff 4f       	sbci	r31, 0xFF	; 255
 540:	01 90       	ld	r0, Z+
 542:	f0 81       	ld	r31, Z
 544:	e0 2d       	mov	r30, r0
 546:	8f b1       	in	r24, 0x0f	; 15
 548:	80 83       	st	Z, r24
 54a:	9c cf       	rjmp	.-200    	; 0x484 <__vector_14+0x44>
					USI_I2C_Slave_State = USI_SLAVE_SEND_DATA;
					//leds[2].value=1;
				}
				else
				{
					USI_Slave_internal_address_set = 0;
 54c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
					USI_I2C_Slave_State = USI_SLAVE_RECV_DATA_WAIT;
 550:	84 e0       	ldi	r24, 0x04	; 4
 552:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <USI_I2C_Slave_State>
 556:	96 cf       	rjmp	.-212    	; 0x484 <__vector_14+0x44>

00000558 <_exit>:
 558:	f8 94       	cli

0000055a <__stop_program>:
 55a:	ff cf       	rjmp	.-2      	; 0x55a <__stop_program>
